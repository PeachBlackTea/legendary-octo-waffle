Github는 소프트웨어 개발 프로젝트를 위한 소스코드 관리 서비스이다. 
다른 사람들의 소스코드를 열람하고 간단한 버그 관리와 공유 서비스까지 갖추고 있기에
개발자에게는 필수불가결한 서비스이다
Github를 사용하여 버전 관리를 하고 있는 기업도 다수 있다.
Github에는 Github를 사용할 때 편리한 필요한 개념들이 있다
바로 커밋과 푸시이다 커밋은 파일을 추가하거나 변경 내용을 저장소에 저장하는 작업이고
푸시는 파일을 추가,변경해 원격 저장소에 업로드 하는 작업이다
저장소는 파일이나 디렉토리를 저장하는 장소인데 변경 이력을 관리하고자 하는 디렉토리 등을
저장소의 관리하에 두는 것으로, 그 디렉토리에 있는 파일 등의 변경 내역을 기록 할 수 있다.
저장소는 총 두 개로 자신의 컴퓨터에 있는 로컬 저장소와 서버 등 네트워크에 있는 원격 저장소가 있다 
기본적으로는 로컬 저장소에서 작업을 수행하고 그 결과를 원격 저장소에 저장하게 된다
마지막으론 브랜치라는게 있는데 소프트웨어 개발은 현재 출시하고 있는 버전의 유지보수를 하면서 
새 기능 추가 및 버그 수정을 할 수 있다. 이러한 병렬로 수행되는 여러 버전 관리를 위해 깃헙에는 브랜치라는 기능이 있다.
깃헙의 사용방법
작은 작업 단위로 커밋을 하고, 어느 정도 작업이 일단락 됐을 때 푸시를 하는 것이 일반적이다
커밋 작업이 알기 쉽게 커밋 메시지를 남겨두면 로그를 따라갈 때 도움이 된다
마지막으로 Github에서 많이 쓰는 명령어를 써보겠다.
Git status: 저장소의 상태를 확인하기 위해 사용하는 명령어이다.
Git add: 파일이나 디렉토리를 인덱스에 추가하는 데 사용하는 명령이다.
Git commit: 인덱스에 추가 된 파일이나 폴더의 내용을 저장소에 쓸 때 사용하는 명령어이다.
Git branch: 브랜치에 대해 다양한 작업을 수행하기 위해 사용하는 명령어이다.
Git checkout: 로컬 저장소의 브랜치를 전환 할 때 사용하는 명령어이다.
Git log: 로컬 저장소의 커밋 역사를 탐색하는 데 사용하는 명령어이다.
Git grep: 저장소의 파일 내용에서 검색하고자 할 때 사용하는 명령어이다.
Git clone: 기존 원격 저장소를 로컬에 다운로드 하기 위하여 사용하는 명령어이다.
Git remote: 원격 저장소를 조작하는 데 사용하는 명령이다
Git reset: 로컬 저장소의 커밋을 취소하기 위하여 사용하는 명령어이다.
Git merge: 현 브랜치에서 다른 지점에서 변경 사항을 병합하는데 사용하는 명령어이다.
Git pull: 원격 브랜치의 변경 사항을 캡쳐하기 위해 사용하는 명령어이다.